_variables:
  gitResName: &gitResName '{{ .Values.metadata.appName }}_git_source'
  frogbotScanResName: &frogbotScanResName '{{ .Values.metadata.appName }}_frogbot_scan_result'
  codeQualityResName: &codeQualityResName '{{ .Values.metadata.appName }}_code_quality_result'
  unitTestResName: &unitTestResName '{{ .Values.metadata.appName }}_unit_test_result'
  buildInfoResultResName: &buildInfoResultResName '{{ .Values.metadata.appName }}_build_result'
  buildInfoResName: &buildInfoResName '{{ .Values.metadata.appName }}_build_info'
  pipelineName: &pipelineName '{{ .Values.metadata.appName }}_build'

valuesFilePath: values.yml

resources:
  - name: *gitResName
    type: GitRepo
    configuration:
    {{ range $key, $value := .Values.inputs.sourceRepository }}

    {{ $isObject := or (eq $key "files") (eq $key "branches") }}
    {{ if (eq $isObject true )}}
      {{ $key }}:
      {{ range $depthKey, $depthValue := .Values.inputs.sourceRepository.$key }}
        {{ $depthKey }}: {{ $depthValue }}
      {{ end }}
    {{ else }}
      {{ $key }}: {{ $value }}
    {{ end }}

    {{ end }}

  - name: *frogbotScanResName
    type: PropertyBag
    configuration:
      timestamp: ''
      reportUrl: ''

  - name: *codeQualityResName
    type: PropertyBag
    configuration:
      timestamp: ''
      reportUrl: ''
  
  - name: *unitTestResName
    type: PropertyBag
    configuration:
      timestamp: ''
      status: ''

  - name: *buildInfoResultResName
    type: PropertyBag
    configuration:
      timestamp: ''
      lintStatus: ''
      buildStatus: ''
      publishStatus: ''
  
  - name: *buildInfoResName
    type: BuildInfo
    configuration:
      sourceArtifactory: myArt
      buildName: java_test_app
      buildNumber: ${run_id}

pipelines:
  - name: *pipelineName
    configuration:      
      environmentVariables:
        readOnly:
          ENABLE_DEBUG_LOGS: 'false'
          SKIP_FROGBOT_SCAN: 'false'
    steps:
      - name: frogbot_scan
        type: Bash
        configuration:
          inputResources:
            - name: *gitResName
            {{- range $resource := .Values.controls.triggerBy.externalResources }}
            - name: '{{ $resource.resourceName }}'
            {{- end }}
          outputResources:
            - name: *frogbotScanResName
        execution:          
          onExecute:
            - echo 'Executing Frogbot scan...'

      - name: code_quality
        type: Bash
        configuration:
          inputSteps:
            - name: frogbot_scan
          inputResources:
            - name: *gitResName        
          outputResources:
            - name: *codeQualityResName
        execution:          
          onExecute:
            - echo 'Executing sonar...'

      - name: unit_tests
        type: Bash
        configuration:
          inputSteps:
            - name: frogbot_scan
          inputResources:
            - name: *gitResName  
          outputResources:
            - name: *unitTestResName
        execution:          
          onExecute:
            - echo 'Linting...'

      - name: lint
        type: Bash
        configuration:
          affinityGroup: build
          inputSteps:
            - name: frogbot_scan
          inputResources:
            - name: *gitResName  
          outputResources:
            - name: *buildInfoResultResName
        execution:          
          onExecute:
            - echo 'Linting...'

      - name: build
        type: Bash
        configuration:
          affinityGroup: build
          inputSteps:
            - name: lint
              status:
                - success
          outputResources:
            - name: *buildInfoResultResName
        execution:
          onExecute:
            - echo 'Building...'

      - name: publish
        type: Bash
        configuration:
          affinityGroup: build
          inputSteps:
            - name: build
              status:
                - success
          outputResources:
            - name: *buildInfoResultResName
            - name: *buildInfoResName
        execution:
          onExecute:
            - echo 'Publising...'
