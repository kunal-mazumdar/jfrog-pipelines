_meta:
  gitResName: &gitResName '{{ .Values.metadata.appName }}_git_source'
  frogbotScanResName: &frogbotScanResName '{{ .Values.metadata.appName }}_frogbot_scan_result'
  codeQualityResName: &codeQualityResName '{{ .Values.metadata.appName }}_code_quality_result'
  unitTestResName: &unitTestResName '{{ .Values.metadata.appName }}_unit_test_result'
  buildInfoResultResName: &buildInfoResultResName '{{ .Values.metadata.appName }}_build_result'
  buildInfoResName: &buildInfoResName '{{ .Values.metadata.appName }}_build_info'
  cronResName: &cronResName '{{ .Values.metadata.appName }}_cron'
  pipelineName: &pipelineName '{{ .Values.metadata.appName }}_build'

# Template Variables
{{ $buildTool := default "maven" .Values.configurations.buildTool }}
{{ $isControlsAvailable := default false .Values.controls }}
{{ $isTriggerByAvailable := default false (and $isControlsAvailable .Values.controls.triggerBy) }}
{{ $isExternalTriggerAvailable := default false (and $isTriggerByAvailable .Values.controls.triggerBy.externalResources) }}
{{ $isCronTriggerEnabled := default false (and $isTriggerByAvailable .Values.controls.triggerBy.cron (eq .Values.controls.triggerBy.cron.enabled true)) }}
{{ $isWebhookTriggerEnabled := default false (and $isTriggerByAvailable .Values.controls.triggerBy.incomingWebhooks) }}

valuesFilePath: values.yml

resources:
  - name: *gitResName
    type: GitRepo
    configuration:
    {{ range $key, $value := .Values.inputs.sourceRepository }}

    {{ $isObject := or (eq $key "files") (eq $key "branches") (eq $key "pullRequestSourceBranches") (eq $key "pullRequestTargetBranches") (eq $key "tags") (eq $key "buildOn") (eq $key "cancelPendingRunsOn") (eq $key "pin") }}
    {{ if (eq $isObject false )}}
      {{ $key }}: {{ $value }}
    {{ else }}
      {{ $key }}:
      {{ range $depthKey, $depthValue := $value }}
        {{ $depthKey }}: {{ $depthValue }}
      {{ end }}      
    {{ end }}

    {{ end }}

  - name: *frogbotScanResName
    type: PropertyBag
    configuration:
      timestamp: ''
      reportUrl: ''

  - name: *codeQualityResName
    type: PropertyBag
    configuration:
      timestamp: ''
      reportUrl: ''
  
  - name: *unitTestResName
    type: PropertyBag
    configuration:
      timestamp: ''
      status: ''

  - name: *buildInfoResultResName
    type: PropertyBag
    configuration:
      timestamp: ''
      lintStatus: ''
      buildStatus: ''
      publishStatus: ''
  
  - name: *buildInfoResName
    type: BuildInfo
    configuration:
      sourceArtifactory: myArt
      buildName: java_test_app
      buildNumber: ${run_id}

  {{ if $isCronTriggerEnabled }}
  - name: *cronResName
    type: CronTrigger
    configuration:
      interval: "{{ .Values.controls.triggerBy.cron.expression }}"
  {{ end }}

  {{ if $isWebhookTriggerEnabled }}
  {{- range $webhook := .Values.controls.triggerBy.incomingWebhooks }}
  - name: "{{ .Values.metadata.appName }}_webhook_{{ $webhook.webhookName }}"
    type: IncomingWebhook
    configuration:
      webhookName: "{{ $webhook.webhookName }}"
  {{ end }}
  {{ end }}

pipelines:
  - name: *pipelineName
    configuration:
      integrations:
        - name: '{{ .Values.inputs.integrations.artifactoryToken }}'
      environmentVariables:
        readOnly:
          ENABLE_DEBUG_LOGS: 'false'
          SKIP_FROGBOT_SCAN: 'false'
          APP_NAME: '{{ .Values.metadata.appName }}'
          {{ if $isWebhookTriggerEnabled }}
          {{- range $webhook := .Values.controls.triggerBy.incomingWebhooks }}
          "{{ $webhook.webhookName }}": "{{ .Values.metadata.appName }}_webhook_{{ $webhook.webhookName }}"
          {{ end }}
          {{ end }}
    steps:
      - name: frogbot_scan
        type: Bash
        configuration:
          inputResources:
            - name: *gitResName
            
            # Enable trigger options via external resources
            {{ if $isExternalTriggerAvailable }}
            {{- range $resource := .Values.controls.triggerBy.externalResources }}
            - name: '{{ $resource.resourceName }}'
            {{- end }}
            {{ end }}

            # Enable cron trigger
            {{ if $isCronTriggerEnabled }}
            - name: *cronResName
            {{ end }}

            # Enable incoming webhook triggers
            {{ if $isWebhookTriggerEnabled }}
            {{- range $webhook := .Values.controls.triggerBy.incomingWebhooks }}
            - name: "{{ .Values.metadata.appName }}_webhook_{{ $webhook.webhookName }}"
            {{ end }}
            {{ end }}
          outputResources:
            - name: *frogbotScanResName
        execution:          
          onExecute:
            - echo 'Executing Frogbot scan...'

      - name: code_quality
        type: Bash
        configuration:
          inputSteps:
            - name: frogbot_scan
          inputResources:
            - name: *gitResName        
          outputResources:
            - name: *codeQualityResName
        execution:          
          onExecute:
            - echo 'Executing sonar...'

      - name: unit_tests
        type: Bash
        configuration:
          inputSteps:
            - name: frogbot_scan
          inputResources:
            - name: *gitResName  
          outputResources:
            - name: *unitTestResName
        execution:          
          onExecute:
            - echo 'Linting...'

      - name: lint
        type: Bash
        configuration:
          affinityGroup: build
          inputSteps:
            - name: frogbot_scan
          inputResources:
            - name: *gitResName  
          outputResources:
            - name: *buildInfoResultResName
        execution:          
          onExecute:
            - echo 'Linting...'

      - name: build
        type: Bash
        configuration:
          affinityGroup: build
          inputSteps:
            - name: lint
              status:
                - success
          outputResources:
            - name: *buildInfoResultResName
        execution:
          onExecute:
            - echo 'Building...'

      - name: publish
        type: Bash
        configuration:
          affinityGroup: build
          inputSteps:
            - name: build
              status:
                - success
          outputResources:
            - name: *buildInfoResultResName
            - name: *buildInfoResName
        execution:
          onExecute:
            - echo 'Publising...'
