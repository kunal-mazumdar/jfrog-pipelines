# Template Variables

# Names
{{ $appName := .Values.metadata.appName }}
{{ $gitResName := print $appName "_git_source" }}
{{ $frogbotScanResName := print $appName "_frogbot_scan_result" }}
{{ $codeQualityResName := print $appName "_code_quality_result" }}
{{ $unitTestResName := print $appName "_unit_test_result" }}
{{ $buildInfoResultResName := print $appName "_build_result" }}
{{ $buildInfoResName := print $appName "_build_info" }}
{{ $cronResName := print $appName "_cron" }}
{{ $pipelineName := print $appName "_build" }}
{{ $rootDirectory := ternary (print "/" .Values.configurations.sourceDirectory) "" (not (eq "" .Values.configurations.sourceDirectory)) }}

# Build Trigger
{{ $buildTool := default "maven" .Values.configurations.buildTool }}
{{ $isControlsAvailable := default false .Values.controls }}
{{ $isTriggerByAvailable := default false (and $isControlsAvailable .Values.controls.triggerBy) }}
{{ $isGitTriggerEnabled := default false (and $isTriggerByAvailable (eq .Values.controls.triggerBy.sourceRepository true)) }}
{{ $isExternalTriggerAvailable := default false (and $isTriggerByAvailable .Values.controls.triggerBy.externalResources) }}
{{ $isCronTriggerEnabled := default false (and $isTriggerByAvailable .Values.controls.triggerBy.cron (eq .Values.controls.triggerBy.cron.enabled true)) }}
{{ $isWebhookTriggerEnabled := default false (and $isTriggerByAvailable .Values.controls.triggerBy.incomingWebhooks) }}

# Logging
{{ $isDebugLogsEnabled := and $isControlsAvailable .Values.controls.logging (eq true .Values.controls.logging.enableDebug) }}

# Exporting
{{ $isExportingEnabled := and $isControlsAvailable .Values.controls.exporting (eq true .Values.controls.exporting.enabled) }}

# Notifications
{{ $isNotificationsAvailable := default false (and $isControlsAvailable .Values.controls.notifications) }}
{{ $isEmailNotificationsAvailable := default false (and $isNotificationsAvailable .Values.controls.notifications.email) }}
{{ $isSlackNotificationsAvailable := default false (and $isNotificationsAvailable .Values.controls.notifications.slack) }}

# Commands
{{ $isCommandsAvailable := default false .Values.configurations.steps }}
{{ $isLintCmdAvailable := and $isCommandsAvailable .Values.configurations.steps.lint }}
{{ $isQualityCmdAvailable := and $isCommandsAvailable .Values.configurations.steps.codeQuality }}
{{ $isTestCmdAvailable := and $isCommandsAvailable .Values.configurations.steps.test }}
{{ $isBuildCmdAvailable := and $isCommandsAvailable .Values.configurations.steps.build }}
{{ $isPublishCmdAvailable := and $isCommandsAvailable .Values.configurations.steps.publish }}

{{ $mvnDefaultLintCmd := "mvn clean checkstyle:checkstyle" }}
{{ $mvnDefaultQualityCmd := "mvn clean sonar:sonar" }}
{{ $mvnDefaultTestCmd := "mvn clean test" }}
{{ $mvnDefaultBuildCmd := "mvn -Dmaven.test.skip=true install" }}
{{ $mvnDefaultPublishCmd := "mvn deploy" }}

{{ $gradleDefaultLintCmd := "gradle clean lint" }}
{{ $gradleDefaultQualityCmd := "gradle clean sonar" }}
{{ $gradleDefaultTestCmd := "gradle clean test" }}
{{ $gradleDefaultBuildCmd := "gradle clean build -x test" }}
{{ $gradleDefaultPublishCmd := "gradle deploy" }}

{{ $defaultLintCmd  := ternary $gradleDefaultLintCmd $mvnDefaultLintCmd (eq $buildTool "gradle") }}
{{ $defaultQualityCmd  := ternary $gradleDefaultQualityCmd $mvnDefaultQualityCmd (eq $buildTool "gradle") }}
{{ $defaultTestCmd  := ternary $gradleDefaultTestCmd $mvnDefaultTestCmd (eq $buildTool "gradle") }}
{{ $defaultBuildCmd  := ternary $gradleDefaultBuildCmd $mvnDefaultBuildCmd (eq $buildTool "gradle") }}
{{ $defaultPublishCmd  := ternary $gradleDefaultPublishCmd $mvnDefaultPublishCmd (eq $buildTool "gradle") }}

valuesFilePath: values.yml

resources:
  - name: {{ $gitResName }}
    type: GitRepo
    configuration:
    {{ range $key, $value := .Values.inputs.sourceRepository }}

    {{ $isObject := or (eq $key "files") (eq $key "branches") (eq $key "pullRequestSourceBranches") (eq $key "pullRequestTargetBranches") (eq $key "tags") (eq $key "buildOn") (eq $key "cancelPendingRunsOn") (eq $key "pin") }}
    {{ if (eq $isObject false )}}
      {{ $key }}: {{ $value }}
    {{ else }}
      {{ $key }}:
      {{ range $depthKey, $depthValue := $value }}
        {{ $depthKey }}: {{ $depthValue }}
      {{ end }}      
    {{ end }}

    {{ end }}

  - name: {{ $frogbotScanResName }}
    type: PropertyBag
    configuration:
      timestamp: ''
      reportUrl: ''

  - name: {{ $codeQualityResName }}
    type: PropertyBag
    configuration:
      timestamp: ''
      reportUrl: ''
  
  - name: {{ $unitTestResName }}
    type: PropertyBag
    configuration:
      timestamp: ''
      status: ''

  - name: {{ $buildInfoResultResName }}
    type: PropertyBag
    configuration:
      timestamp: ''
      lintStatus: ''
      buildStatus: ''
      publishStatus: ''
  
  - name: {{ $buildInfoResName }}
    type: BuildInfo
    configuration:
      sourceArtifactory: myArt
      buildName: java_test_app
      buildNumber: ${run_id}

  {{ if $isCronTriggerEnabled }}
  - name: {{ $cronResName }}
    type: CronTrigger
    configuration:
      interval: '{{ .Values.controls.triggerBy.cron.expression }}'
  {{ end }}

  {{ if $isWebhookTriggerEnabled }}
  {{- range $webhook := .Values.controls.triggerBy.incomingWebhooks }}
  - name: "{{ $appName }}_webhook_{{ $webhook.webhookName }}"
    type: IncomingWebhook
    configuration:
      webhookName: {{ $webhook.webhookName }}
  {{ end }}
  {{ end }}

pipelines:
  - name: {{ $pipelineName }}
    configuration:
      runtime:
        type: image
        image:
          auto:
            language: java
            versions:
              - "17"
      integrations:
        - name: {{ .Values.inputs.integrations.artifactoryToken }}
        {{ if $isEmailNotificationsAvailable}}
        - name: {{ .Values.controls.notifications.email.integrationName }}
        {{ end }}
        {{ if $isSlackNotificationsAvailable }}
        - name: {{ .Values.controls.notifications.slack.integrationName }}
        {{ end }}
      environmentVariables:
        readOnly:
          ENABLE_DEBUG_LOGS: '{{ $isDebugLogsEnabled }}'
          ENABLE_EXPORTING_REPORTS: '{{ $isExportingEnabled }}'
          SKIP_FROGBOT_SCAN: 'false'
    steps:
      - name: frogbot_scan
        type: Bash
        configuration:
          inputResources:
            - name: {{ $gitResName }}
              trigger: {{ $isGitTriggerEnabled }}
            
            # Enable trigger options via external resources
            {{ if $isExternalTriggerAvailable }}
            {{- range $resource := .Values.controls.triggerBy.externalResources }}
            - name: '{{ $resource.resourceName }}'
            {{- end }}
            {{ end }}

            # Enable cron trigger
            {{ if $isCronTriggerEnabled }}
            - name: {{ $cronResName }}
            {{ end }}

            # Enable incoming webhook triggers
            {{ if $isWebhookTriggerEnabled }}
            {{- range $webhook := .Values.controls.triggerBy.incomingWebhooks }}
            - name: "{{ $appName }}_webhook_{{ $webhook.webhookName }}"
            {{ end }}
            {{ end }}
          outputResources:
            - name: {{ $frogbotScanResName }}
        execution:          
          onExecute:
            - echo 'Executing Frogbot scan...'

      - name: code_quality
        type: Bash
        configuration:
          inputSteps:
            - name: frogbot_scan
          inputResources:
            - name: {{ $gitResName }}
          outputResources:
            - name: {{ $codeQualityResName }}
        execution:          
          onExecute:
            - pushd ${res_{{ $gitResName }}_resourcePath}{{ $rootDirectory }}
            {{ if $isQualityCmdAvailable }}
            {{- range $cmd := .Values.configurations.steps.codeQuality.commands }}
            - {{ $cmd }}
            {{- end }}
            {{ else if (or (eq "maven" $buildTool) (eq "gradle" $buildTool)) }}
            - {{ $defaultQualityCmd }}
            {{ end }}
            - popd

      - name: unit_tests
        type: Bash
        configuration:
          inputSteps:
            - name: frogbot_scan
          inputResources:
            - name: {{ $gitResName }}
          outputResources:
            - name: {{ $unitTestResName }}
        execution:          
          onExecute:
            - pushd ${res_{{ $gitResName }}_resourcePath}{{ $rootDirectory }}
            {{ if $isTestCmdAvailable }}
            {{- range $cmd := .Values.configurations.steps.test.commands }}
            - {{ $cmd }}
            {{- end }}
            {{ else if (or (eq "maven" $buildTool) (eq "gradle" $buildTool)) }}
            - {{ $defaultTestCmd }}
            {{ end }}
            - popd

      - name: lint
        type: Bash
        configuration:
          affinityGroup: build
          inputSteps:
            - name: frogbot_scan
          inputResources:
            - name: {{ $gitResName }}
          outputResources:
            - name: {{ $buildInfoResultResName }}
        execution:          
          onExecute:
            - pushd ${res_{{ $gitResName }}_resourcePath}{{ $rootDirectory }}
            {{ if $isLintCmdAvailable }}
            {{- range $cmd := .Values.configurations.steps.lint.commands }}
            - {{ $cmd }}
            {{- end }}
            {{ else if (or (eq "maven" $buildTool) (eq "gradle" $buildTool)) }}
            - {{ $defaultLintCmd }}
            {{ end }}
            - cp -r * ${shared_workspace}
            - popd

      - name: build
        type: Bash
        configuration:
          affinityGroup: build
          inputSteps:
            - name: lint
              status:
                - success
          outputResources:
            - name: {{ $buildInfoResultResName }}
        execution:
          onExecute:
            - pushd ${shared_workspace}{{ $rootDirectory }}
            {{ if $isBuildCmdAvailable }}
            {{- range $cmd := .Values.configurations.steps.build.commands }}
            - {{ $cmd }}
            {{- end }}
            {{ else if (or (eq "maven" $buildTool) (eq "gradle" $buildTool)) }}
            - {{ $defaultBuildCmd }}
            {{ end }}
            - popd

      - name: publish
        type: Bash
        configuration:
          affinityGroup: build
          inputSteps:
            - name: build
              status:
                - success
            - name: unit_tests
              status:
                - success
                - skipped
            - name: code_quality
              status:
                - success
                - skipped
          outputResources:
            - name: {{ $buildInfoResultResName }}
            - name: {{ $buildInfoResName }}
        execution:
          onExecute:
            - pushd ${shared_workspace}{{ $rootDirectory }}
            {{ if $isPublishCmdAvailable }}
            {{- range $cmd := .Values.configurations.steps.publish.commands }}
            - {{ $cmd }}
            {{- end }}
            {{ else if (or (eq "maven" $buildTool) (eq "gradle" $buildTool)) }}
            - {{ $defaultPublishCmd }}
            {{ end }}
            - popd
